# -*- coding: utf-8 -*-
"""Entrega Chiodini Certificacion V1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xDYLgj7W_l7PEYyzRJcFPBUqFq2hfCZC
"""

#DARIO JAVIER CHIODINI Entrega Certificacion Python - FESAT

#EJERCICIO 1: VERDADERO O FALSO
rta1 = "Falso"
rta2 = "Verdadero"
rta3 = "Verdadero"
rta4 = "Falso"
rta5 = "verdadero"
rta6 = "verdadero"
rta7 = "verdadero" 
rta8 = "verdadero" 
rta9 = "verdadero"
rta10 = "Falso"

#EJERCICIO 2: PROGRAMACIÓN ORIENTADA A OBJETOS
listabicicletas = []
ganancias = 0
cantidad_de_ventas = 0

class Bicicleta():
  def __init__ (self, serial="", modelo="", anio=int, precio=float):
    self.serial= serial
    self.modelo = modelo
    self.anio = anio
    self.precio = precio
    listabicicletas.append({"serial":self.serial, "modelo": self.modelo, "anio": self.anio, "precio": self.precio})
    print(f"has agregado al Inventario el modelo {self.serial} con un precio de {self.precio}")
    

  def setter_precio(self, precio):
    self.precio=precio
    return f"el cambio de PRECIO se ha realizado correctamente a {self.precio}"
  def getter_serial(self):
    return self.serial
  def getter_precio(self):
    return self.precio

class Bicicleteria():  
  def __init__(self, bicicletas=list, ganancias=0, cantidad_de_ventas=0):      
    self.bicicletas = bicicletas
    self.ganancias = ganancias
    self.cantidad_de_ventas = cantidad_de_ventas    
    print(f"INICIO de actividades la bicicleteria tiene bicicletas {self.bicicletas}, ganancias {self.ganancias} , cantidad de ventas {self.cantidad_de_ventas} ")
    
  def comprar (self, serial="", modelo="", anio=int, precio=float):
    self.serial= serial
    self.modelo = modelo
    self.anio = anio
    self.precio = precio
    listabicicletas.append({"serial": self.serial, "modelo": self.modelo, "anio": self.anio, "precio": self.precio})
    print(f"has agregado al Inventario por COMPRA el modelo {self.serial} con un precio de {self.precio}")
    return self.serial

  def vender (self, serial):
    self.serial=serial
    for a in listabicicletas:      
      if serial in a["serial"]:           
        venta = 1
        ganancia_venta = a["precio"]
        print(f"encontre a {serial} tiene una ganancia de {ganancia_venta}")
        self.ganancias+=a["precio"] 
        self.cantidad_de_ventas+=1      
        print(f"he vendido ya {self.cantidad_de_ventas} con una ganancia total de  {self.ganancias}")
        return self.serial

#creo una bicileteria
carlin = Bicicleteria()

#creo 1 bici
bici1 = Bicicleta("H1","hombres", 2022, 50000)

#creo 2 bici
bici2 = Bicicleta("M1","mujeres", 2022, 40000)

#creo 3 bici
bici3 = Bicicleta("N1","niños", 2022, 30000)

#creo 4 bici
bici4 = Bicicleta("E1","electricas", 2022, 1000000)

#uso el metodo comprar bicicleta
carlin.comprar("U1","unisex",2022, 60000)

carlin.comprar("AA11","carreras",2022, 125000)

#uso el metodo vender bicicleta
carlin.vender("U1")

#uso el metodo vender bicicleta
carlin.vender("M1")

#uso el metodo vender bicicleta
carlin.vender("AA11")

# uso el metodo setter precio
bici3.setter_precio(1111111111)

#uso el método getter precio
bici3.getter_precio()

#uso el método getter serial
bici3.getter_serial()

#EJERCICIO 3: GUARDAR UN OBJETO DICCIONARIO EN UN ARCHIVO JSON

heroes= {"nombre": "Flash","identidadSecreta": "Bartholomew Henry 'Barry' Allen","poderes": ["Inmensa velocidad","agilidad","Electrokinesis"]},{"nombre": "Batman",
"identidadSecreta": "Bruce Wayne","poderes": ["Super fuerza","super velocidad"]},{ "nombre": "Super Man","identidadSecreta": "Clark Joseph Kent","poderes": ["Super fuerza","super velocidad","resistencia",
"agilidad","reflejos","durabilidad","sentidos y longevidad"]}
diccionario={}
lista=[]
diccionario["Superheroes"]=lista
for b in heroes:
  lista.append(b)
import json
with open("super_heroes.json", 'w') as file:
    json.dump(diccionario, file, indent=4)
    
with open("super_heroes.json") as file:
  x = json.load(file)
  print(x)

print(type(heroes))
print(type(diccionario))

# Commented out IPython magic to ensure Python compatibility.
#EJERCICIO 4: Análisis de datos 
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
titanic = pd.read_csv('https://raw.githubusercontent.com/NotAyushXD/Titanic-dataset/master/train.csv')

#1. Mostrar la información de los primeros 5 pasajeros.
print("1. Mostrar la información de los primeros 5 pasajeros.")
titanic.head(5)

#2. Mostrar la información de los últimos 5 pasajeros.
print("2. Mostrar la información de los últimos 5 pasajeros.")
titanic.tail(5)

#3. Mostrar la cantidad total de filas y columnas.
print("3. Mostrar la cantidad total de filas y columnas.")
totales = titanic.shape
print(f"la cantidad de filas y columnas es respectivamente {totales}")

#4. ¿Cuándo dinero se recaudó en ese viaje?
print("4. ¿Cuándo dinero se recaudó en ese viaje?")
dinero = titanic['Fare'].sum()
print(f"se recaudo {dinero} dinero")

#5. ¿Cuál es la Cantidad de personas que viajaban en primera clase?
z = titanic[titanic["Pclass"]==1]['Pclass'].sum()
print(f"Las personas que viajaban en primera clase eran {z}")

#6. Graficar la cantidad de personas que viajaban por cada clase del barco
titanic['Pclass'].value_counts().plot(kind='bar',color=['greenyellow','rebeccapurple','darkblue'])

#FIN
#Muchas Gracias
#Dario Chiodini